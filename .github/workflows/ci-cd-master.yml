name: CI/CD Pipeline - Master Branch

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOCKER_IMAGE_NAME: evmmanagement-api
  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build solution
        run: dotnet build --configuration Release --no-restore
      
      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
        continue-on-error: true
      
      - name: Publish build artifacts
        run: dotnet publish EVMManagement.API/EVMManagement.API.csproj -c Release -o ./publish
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish
          retention-days: 1

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64

  deploy-to-render:
    name: Deploy to Render.com
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{}'
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Check deployment status
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X GET "https://api.render.com/v1/services/$RENDER_SERVICE_ID" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, deploy-to-render]
    if: always()
    
    steps:
      - name: Send success notification
        if: ${{ needs.deploy-to-render.result == 'success' }}
        run: |
          echo "✅ Deployment to Render.com successful!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
      
      - name: Send failure notification
        if: ${{ needs.deploy-to-render.result == 'failure' || needs.docker-build.result == 'failure' || needs.build-and-test.result == 'failure' }}
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs for more details."
          exit 1
