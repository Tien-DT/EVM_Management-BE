// <auto-generated />
using System;
using EVMManagement.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EVMManagement.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251020095428_AddVnPayFieldsToTransaction")]
    partial class AddVnPayFieldsToTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.AvailableSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MasterSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SlotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("MasterSlotId");

                    b.HasIndex("VehicleId");

                    b.ToTable("AvailableSlots");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AccountOwner")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("DealerId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContractLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Terms")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CardId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EstablishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.DealerContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContractLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SignedByDealerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SignedByEvmUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Terms")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractCode")
                        .IsUnique();

                    b.HasIndex("DealerId")
                        .IsUnique();

                    b.HasIndex("SignedByDealerUserId");

                    b.HasIndex("SignedByEvmUserId");

                    b.ToTable("DealerContracts");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReceivedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReceivedByUserId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.DigitalSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DealerContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("HandoverRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OtpAttemptCount")
                        .HasColumnType("integer");

                    b.Property<string>("OtpCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("OtpExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignatureData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SignerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("DealerContractId");

                    b.HasIndex("HandoverRecordId");

                    b.HasIndex("VerificationCode");

                    b.HasIndex("ContractId", "HandoverRecordId", "DealerContractId");

                    b.HasIndex("SignerEmail", "Status", "OtpExpiresAt");

                    b.ToTable("DigitalSignatures");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.HandoverRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("HandoverDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransportDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("TransportDetailId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("HandoverRecords");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.InstallmentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("InstallmentPayments");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.InstallmentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfInstallments")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("InstallmentPlans");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceCode")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.MasterTimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("StartOffsetMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MasterTimeSlots");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpectedDeliveryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinanced")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("QuotationId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleVariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleVariantId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.QuotationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("VehicleVariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.HasIndex("VehicleVariantId");

                    b.ToTable("QuotationDetails");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.TestDriveBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckinAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckoutAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DealerStaffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleTimeslotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerStaffId");

                    b.HasIndex("VehicleTimeslotId")
                        .IsUnique();

                    b.ToTable("TestDriveBookings");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepositId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InstallmentPaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentGateway")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ResponseCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SecureHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VnpayTransactionCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VnpayTransactionNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepositId");

                    b.HasIndex("InstallmentPaymentId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DropoffLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickupLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ScheduledPickupAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.TransportDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TransportId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("TransportDetails");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("CardId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("DealerId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("Vin")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LaunchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Ranking")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehiclePromotion", b =>
                {
                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("VariantId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("VehiclePromotions");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleTimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MasterSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SlotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("MasterSlotId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleTimeSlots");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatteryLife")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BatteryType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Brakes")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Capacity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ChargingCapacity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ChargingTime")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DistancePerCharge")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Engine")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("GroundClearance")
                        .HasColumnType("integer");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaximumSpeed")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShockAbsorbers")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TrunkWidth")
                        .HasColumnType("integer");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("VehicleVariants");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.AvailableSlot", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.MasterTimeSlot", "MasterSlot")
                        .WithMany()
                        .HasForeignKey("MasterSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("MasterSlot");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.BankAccount", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Dealer", "Dealer")
                        .WithMany("BankAccounts")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Contract", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.UserProfile", "CreatedByUser")
                        .WithMany("CreatedContracts")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Order", "Order")
                        .WithOne("Contract")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.Contract", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.DealerContract", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Dealer", "Dealer")
                        .WithOne("DealerContract")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.DealerContract", "DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.UserProfile", "SignedByDealerUser")
                        .WithMany("SignedDealerContractsAsDealer")
                        .HasForeignKey("SignedByDealerUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.UserProfile", "SignedByEvmUser")
                        .WithMany("SignedDealerContractsAsEVM")
                        .HasForeignKey("SignedByEvmUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dealer");

                    b.Navigation("SignedByDealerUser");

                    b.Navigation("SignedByEvmUser");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Deposit", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Order", "Order")
                        .WithMany("Deposits")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Account", "ReceivedByUser")
                        .WithMany("ReceivedDeposits")
                        .HasForeignKey("ReceivedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Order");

                    b.Navigation("ReceivedByUser");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.DigitalSignature", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Contract", "Contract")
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EVMManagement.DAL.Models.Entities.DealerContract", "DealerContract")
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("DealerContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EVMManagement.DAL.Models.Entities.HandoverRecord", "HandoverRecord")
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("HandoverRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contract");

                    b.Navigation("DealerContract");

                    b.Navigation("HandoverRecord");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.HandoverRecord", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Order", "Order")
                        .WithOne("HandoverRecord")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.HandoverRecord", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.TransportDetail", "TransportDetail")
                        .WithOne("HandoverRecord")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.HandoverRecord", "TransportDetailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.Vehicle", "Vehicle")
                        .WithOne("HandoverRecord")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.HandoverRecord", "VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TransportDetail");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.InstallmentPayment", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.InstallmentPlan", "InstallmentPlan")
                        .WithMany("InstallmentPayments")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstallmentPlan");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.InstallmentPlan", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Order", "Order")
                        .WithOne("InstallmentPlan")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.InstallmentPlan", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Invoice", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.Invoice", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Order", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.UserProfile", "CreatedByUser")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.Dealer", "Dealer")
                        .WithMany("Orders")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.Quotation", "Quotation")
                        .WithOne("Order")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.Order", "QuotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("OrderDetails")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.VehicleVariant", "VehicleVariant")
                        .WithMany("OrderDetails")
                        .HasForeignKey("VehicleVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleVariant");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Quotation", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.UserProfile", "CreatedByUser")
                        .WithMany("CreatedQuotations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.QuotationDetail", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Quotation", "Quotation")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.VehicleVariant", "VehicleVariant")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("VehicleVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quotation");

                    b.Navigation("VehicleVariant");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.TestDriveBooking", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Customer", "Customer")
                        .WithMany("TestDriveBookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.UserProfile", "DealerStaff")
                        .WithMany("AssistedTestDriveBookings")
                        .HasForeignKey("DealerStaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.VehicleTimeSlot", "VehicleTimeSlot")
                        .WithOne("TestDriveBooking")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.TestDriveBooking", "VehicleTimeslotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DealerStaff");

                    b.Navigation("VehicleTimeSlot");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Transaction", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Deposit", "Deposit")
                        .WithMany("Transactions")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.InstallmentPayment", "InstallmentPayment")
                        .WithMany("Transactions")
                        .HasForeignKey("InstallmentPaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVMManagement.DAL.Models.Entities.Invoice", "Invoice")
                        .WithMany("Transactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Deposit");

                    b.Navigation("InstallmentPayment");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.TransportDetail", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("EVMManagement.DAL.Models.Entities.Transport", "Transport")
                        .WithMany("TransportDetails")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Vehicle", "Vehicle")
                        .WithOne("TransportDetail")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.TransportDetail", "VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Transport");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.UserProfile", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Account", "Account")
                        .WithOne("UserProfile")
                        .HasForeignKey("EVMManagement.DAL.Models.Entities.UserProfile", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Dealer", "Dealer")
                        .WithMany("UserProfiles")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Vehicle", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.VehicleVariant", "VehicleVariant")
                        .WithMany("Vehicles")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Warehouse", "Warehouse")
                        .WithMany("Vehicles")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleVariant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehiclePromotion", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Promotion", "Promotion")
                        .WithMany("VehiclePromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.VehicleVariant", "VehicleVariant")
                        .WithMany("VehiclePromotions")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("VehicleVariant");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleTimeSlot", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Dealer", "Dealer")
                        .WithMany("VehicleTimeSlots")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.MasterTimeSlot", "MasterSlot")
                        .WithMany("VehicleTimeSlots")
                        .HasForeignKey("MasterSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVMManagement.DAL.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleTimeSlots")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("MasterSlot");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleVariant", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.VehicleModel", "VehicleModel")
                        .WithMany("VehicleVariants")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Warehouse", b =>
                {
                    b.HasOne("EVMManagement.DAL.Models.Entities.Dealer", "Dealer")
                        .WithMany("Warehouses")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Account", b =>
                {
                    b.Navigation("ReceivedDeposits");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Contract", b =>
                {
                    b.Navigation("DigitalSignatures");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Customer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Orders");

                    b.Navigation("Quotations");

                    b.Navigation("TestDriveBookings");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Dealer", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("DealerContract");

                    b.Navigation("Orders");

                    b.Navigation("UserProfiles");

                    b.Navigation("VehicleTimeSlots");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.DealerContract", b =>
                {
                    b.Navigation("DigitalSignatures");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Deposit", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.HandoverRecord", b =>
                {
                    b.Navigation("DigitalSignatures");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.InstallmentPayment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.InstallmentPlan", b =>
                {
                    b.Navigation("InstallmentPayments");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Invoice", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.MasterTimeSlot", b =>
                {
                    b.Navigation("VehicleTimeSlots");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Order", b =>
                {
                    b.Navigation("Contract");

                    b.Navigation("Deposits");

                    b.Navigation("HandoverRecord");

                    b.Navigation("InstallmentPlan");

                    b.Navigation("Invoice");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Promotion", b =>
                {
                    b.Navigation("VehiclePromotions");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Quotation", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("QuotationDetails");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Transport", b =>
                {
                    b.Navigation("TransportDetails");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.TransportDetail", b =>
                {
                    b.Navigation("HandoverRecord");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.UserProfile", b =>
                {
                    b.Navigation("AssistedTestDriveBookings");

                    b.Navigation("CreatedContracts");

                    b.Navigation("CreatedOrders");

                    b.Navigation("CreatedQuotations");

                    b.Navigation("SignedDealerContractsAsDealer");

                    b.Navigation("SignedDealerContractsAsEVM");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Vehicle", b =>
                {
                    b.Navigation("HandoverRecord");

                    b.Navigation("OrderDetails");

                    b.Navigation("TransportDetail");

                    b.Navigation("VehicleTimeSlots");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleModel", b =>
                {
                    b.Navigation("VehicleVariants");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleTimeSlot", b =>
                {
                    b.Navigation("TestDriveBooking");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.VehicleVariant", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("QuotationDetails");

                    b.Navigation("VehiclePromotions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EVMManagement.DAL.Models.Entities.Warehouse", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
